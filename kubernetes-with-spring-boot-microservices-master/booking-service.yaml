kind: Service
apiVersion: v1
metadata:
  name: booking-service # name of the service
  labels:
    name: rent-car
spec:
  ports:
    - nodePort: 31002 # port number
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:           
    app: rent-car # name of the deployment
  type: NodePort       

---
# Define a 'Persistent Voulume Claim'(PVC) for Mysql Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim # type of the object
metadata:
  name: myacnt-pv-claim # name of PVC essential for identifying the storage data
  labels:
    app: rent-car
    tier: application
spec:
  accessModes:
    - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: 1Gi    #This will tell kubernetes about the amount of space we are trying to claim.
---
apiVersion: apps/v1 
kind: Deployment     # kind of the deployment
metadata:              
  name: booking-service
spec:                
  selector:         
    matchLabels:
      app: rent-car
  replicas: 2 # Number of desired replicas
  template:
    metadata:
      labels:        
        app: rent-car
    spec:
      containers:
      - name: booking-service
        image: ziedyazidi/booking-service #dockerhub image
        ports:
          - containerPort: 8080
              # Autoscaling
        resources:
          limits: # Memory and CPU limits  for the container
            cpu: 500m # CPU limit in millicores
          requests: # Memory limit  in bytes
            cpu: 200m # CPU limit   in millicores
        env:   # Setting Enviornmental Variables
        - name: DB_HOST   # Setting Database host address from configMap
          valueFrom: 
            configMapKeyRef:
              name: db-conf  # name of configMap
              key: host
        - name: DB_NAME  # Setting Database name from configMap
          valueFrom:
            configMapKeyRef:
              name: db-conf 
              key: name
        - name: DB_USERNAME  # Setting Database username from Secret
          valueFrom:
            secretKeyRef:
              name: db-credentials # Secret Name
              key: username
        - name: DB_PASSWORD # Setting Database password from Secret
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password     
          #volumeMounts: # Mounting the volume
        volumeMounts:
          - name: myacnt-pv-claim # name of the PVC
            mountPath: /usr/local/acnt/data # Mounting the volume
            #volumes: # Volumes
      volumes:
        - name: myacnt-pv-claim # name of the PVC
          persistentVolumeClaim:
            claimName: myacnt-pv-claim # name of the PVC
            
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: myacnt-pv-claim
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"            
